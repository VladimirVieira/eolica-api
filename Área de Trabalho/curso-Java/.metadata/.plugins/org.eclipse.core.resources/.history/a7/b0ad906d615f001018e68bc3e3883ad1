package br.com.ufrn.pds1.projetopds1.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import br.com.ufrn.pds1.projetopds1.exception.DadosInvalidosException;
import br.com.ufrn.pds1.projetopds1.model.DadosDiarioHistoricoModel;

public class DadosDiarioClimaUrbanoService extends DadosDiarioServiceTemplate {
//****************************************************************************************************************************************************************
			@Override
			//Constroi a URL
			public String montarUrl(double latitude, double longitude, String dataInicio, String dataFim) {
						
				return  String.format("https://archive-api.open-meteo.com/v1/archive"
						+ "?latitude=%s"
						+ "&longitude=%s"
						+ "&start_date=%s"
						+ "&end_date=%s"
						+ "&daily=shortwave_radiation_sum,rain_sum"
						+ "&timezone=America/Fortaleza",latitude, longitude, dataInicio, dataFim);
			}
			
//****************************************************************************************************************************************************************
			@Override
			public DadosDiarioHistoricoModel instanciarDadosDiario(Double latitude, Double longitude,Map<String, Object> daily) {
						
				if (daily == null) {
						throw new DadosInvalidosException("Apresenta dados inválidos");
				}
						
				//armazenando dados
				DadosDiarioHistoricoModel armazemDados = new DadosDiarioHistoricoModel();
						
				armazemDados.setData((List<String>) daily.get("time"));
				armazemDados.setLocal("Latitude:" + latitude + "Longitude:" + longitude);
				armazemDados.setFator1((List<Double>) daily.get("shortwave_radiation_sum"));
				armazemDados.setFator2((List<Double>) daily.get("rain_sum"));
				
						
							
				return armazemDados;
			}
			
//****************************************************************************************************************************************************************

			@Override
				public List<Double> calcularFatorClimatico1(List<Double> radiacao, List<Double> condicao){
								
					if(radiacao == null || radiacao.isEmpty()) {
							throw new DadosInvalidosException("As listas são inválidas/vazias");
					}
								
					List<Double> mediasPorDia = new ArrayList<>();
								
					for (int i = 0; i < radiacao.size(); i++) {
						double resultadoMedia = ((radiacao.get(i)*4)+(radiacao.get(i)*5)) / 9;
							mediasPorDia.add(resultadoMedia);
					}
					
					return mediasPorDia;
				}

}
