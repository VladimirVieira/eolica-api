package br.com.ufrn.pds1.projetopds1.service;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import br.com.ufrn.pds1.projetopds1.exception.DadosInvalidosException;
import br.com.ufrn.pds1.projetopds1.model.DadosLocalModel;

@Service
public class DadosLocalAgriculturaService extends DadosLocalServiceTemplate{
//*************************************************************************************************************************************************************************
		//Constroi a URL
		@Override
		public String construirUrl(String latitude, String longitude, String data) {
		    return String.format(
		        "https://api.open-meteo.com/v1/forecast?"
		        + "latitude=%s&"
		        + "longitude=%s&"
		        + "hourly=precipitation,shortwave_radiation&"
		        + "start_date=%s&"
		        + "end_date=%s&"
		        + "timezone=America/Fortaleza",
		        latitude, longitude, data, data
		    );
		}

//*************************************************************************************************************************************************************************
	
		@Override
		public Double obterDadosFator1(Map<String, Object> hourly){
			
			if (hourly == null) {
				throw new DadosInvalidosException("Apresenta dados inválidos para precipitacao");
			}
			
			List<Double> precipitacao = (List<Double>) hourly.get("precipitation");
			return precipitacao.get(15);
			//Aqui muda
		}

//************************************************************************************************************************************************************************
			@Override
			public Double obterDadosFator2(Map<String, Object> hourly){
				
				if (hourly == null) {
					throw new DadosInvalidosException("Apresenta dados inválidos para ");
				}
		        
				List<Double> radiacao = (List<Double>) hourly.get("radiacao");
				return radiacao.get(11);
				//Aqui muda
			}
	
//************************************************************************************************************************************************************************	

			@Override
			public DadosLocalModel pesquisarDados(String latitude, String longitude, String data) {
				//aqui tem de ser mais geral o nome das variáveis
				double lat = Double.parseDouble(latitude);
				double lon = Double.parseDouble(longitude);

				validarLatitudeLongitude(lat,lon);
				
				
				String url = construirUrl(latitude, longitude, data);
				Map<String, Object> hourly = obterDadosDaApi(url);

		        // Pega os dados do índice 9
		        double precipitacao = obterDadosFator1(hourly);
		        double radiacao = obterDadosFator2(hourly);

		               
		        DadosLocalModel informacao = new DadosLocalModel();
		        informacao.setData(data);
		        informacao.setLatitude(lat);
		        informacao.setLongitude(lon);
		        informacao.setFator1(precipitacao);
		        informacao.setFator2(radiacao);

		        return informacao;
		           
			}
}
