package br.com.ufrn.pds1.projetopds1.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import br.com.ufrn.pds1.projetopds1.exception.DadosInvalidosException;
import br.com.ufrn.pds1.projetopds1.model.DadosDiariosHistorico;


public abstract class DadosDiarioEolicoService extends DadosDiarioServiceTemplate{

//************************************************************************************************************************************

		@Override
		//Constroi a URL
		public String montarUrl(double latitude, double longitude, String dataInicio, String dataFim) {
					
			return  String.format("https://archive-api.open-meteo.com/v1/archive"
					+ "?latitude=%s"
					+ "&longitude=%s"
					+ "&start_date=%s"
					+ "&end_date=%s"
					+ "&daily=temperature_2m_max,temperature_2m_min,windspeed_10m_max"
					+ "&timezone=America/Fortaleza",latitude, longitude, dataInicio, dataFim);
			//AQUI muda
		}
		
		
//************************************************************************************************************************************
		public DadosDiariosHistorico instanciarDadosDiario(Double latitude, Double longitude,Map<String, Object> daily) {
					
			if (daily == null) {
					throw new DadosInvalidosException("Apresenta dados inválidos");
			}
					
			//armazenando dados
			DadosDiariosHistorico armazemDados = new DadosDiariosHistorico();
					
			armazemDados.setData((List<String>) daily.get("time"));
			armazemDados.setLocal("Latitude:" + latitude + "Longitude:" + longitude);
			armazemDados.setTempMax((List<Double>) daily.get("temperature_2m_max"));
			armazemDados.setTempMin((List<Double>) daily.get("temperature_2m_min"));
			armazemDados.setVelVento10m((List<Double>) daily.get("windspeed_10m_max"));
					
						
			return armazemDados;
			//aqui muda
			}
//************************************************************************************************************************************
		//Calcular Média Temperatura
			public List<Double> calcularTemperaturaMedia(List<Double> tempMaior, List<Double> tempMenor){
							
				if(tempMaior == null || tempMenor == null || tempMaior.isEmpty() || tempMenor.isEmpty()) {
						throw new DadosInvalidosException("As listas são inválidas/vazias");
				}
							
				List<Double> mediasPorDia = new ArrayList<>();
							
				for (int i = 0; i < tempMaior.size(); i++) {
					double resultadoMedia = (tempMaior.get(i) + tempMenor.get(i)) / 2;
						mediasPorDia.add(resultadoMedia);
				}
				return mediasPorDia;
							//muda de acordo com a aplicação
				}
}



  
